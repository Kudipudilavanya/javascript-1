Certainly! Here's a more extensive JavaScript program. This is a simple to-do list application. It uses HTML for the structure, CSS for styling, and JavaScript for functionality. It's a good exercise to understand how these three technologies can work together.

HTML (index.html):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>To-Do List</title>
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <input type="text" id="taskInput" placeholder="Add new task...">
        <button onclick="addTask()">Add</button>
        <ul id="taskList"></ul>
    </div>

    <script src="script.js"></script>
</body>
</html>
CSS (style.css):

css
Copy code
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    color: #333;
}

input[type="text"] {
    width: 70%;
    padding: 8px;
    margin-right: 5px;
}

button {
    padding: 8px;
    cursor: pointer;
}

ul {
    list-style-type: none;
    padding: 0;
}

li {
    border-bottom: 1px solid #ddd;
    padding: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

li:last-child {
    border-bottom: none;
}
JavaScript (script.js):

javascript
Copy code
function addTask() {
    var taskInput = document.getElementById("taskInput");
    var taskList = document.getElementById("taskList");

    if (taskInput.value !== "") {
        var li = document.createElement("li");
        li.innerHTML = taskInput.value + '<button onclick="removeTask(this)">Remove</button>';
        taskList.appendChild(li);
        taskInput.value = "";
    }
}

function removeTask(button) {
    var li = button.parentNode;
    var ul = li.parentNode;
    ul.removeChild(li);
}
This to-do list allows you to add tasks and remove them. It's a good starting point for understanding how to manipulate the DOM (Document Object Model) with JavaScript. Feel free to modify and expand upon it as you learn more about JavaScript and web development.
